　'Kosugi', 'Noto Serif JP' 共にルビ文字の大きさは元の文字の大きさのちょうど半分。

　ルビの問題が不確定要素といっても、一行の最大文字数を下回ることはあっても超えることはない。
　だから行あたりの文字数から最低どこくらいのスケールをとるのかは計算可能。

　すべての行を最大文字数毎に分割していたら処理が膨大になってしまうので、
　ページをオーバーした行だけ検出して分割し、次のページに送る方式が良いと思う。


$#########$#########$#########$#########$#########
220216

テスト結果。

サンプル小説に一行ずつ行を追加していくと、最後の手前の行が複数だった時に
separateFinalLine() で分割された最終行が追加されてしまう。

その後さらにもう一行追加すると、その複数行だった行が
途中で分割されて一行となり、最後に挿入される。

この時、ページの最大行数に関係なく1行だけ追加されてしまうため、
必要な行数分追加するように改良する必要あり。


class Page3Js の createPage() で行がはみ出すのは3つのパターンがある。

1: はみ出し行を追加する前に複数行分の空白があり、はみ出し行がそれを上回る複数行
　　5行まで収まるページだとして、1行追加、その後に5行追加、みたいなパターン。

2: はみ出し前の行がギリギリでページに収まる（1行でも追加したらアウト）
　　5行のページとして、5行分の文章追加、その後に行追加、というパターン。

3: 残り1行の状態で2行分以上の文章が追加される
　　5行のページとして、4行分の文章追加、 その後に複数行分の追加。


最終行がルビを含むかどうかも判定に影響を与える。
ルビありだと1行に収まらないのに、ルビなしだと入っちゃうようなケース。

最終行がルビかどうかを判別するには、
まず行全体に<ruby>が含まれるか判定、
含まれる場合、それの indexOf が maxChars 以内にあるか判定。
これでほとんどの場合ふるいにかけられるが、厄介なのはルビが行を跨ぐ場合。

ルビの indexOf が maxChars 以内にある場合、
ルビ漢字とフリガナの文字数を両方検出して、
長い方が行の外にはみ出すかどうかを検出する。
フリガナの方は漢字の2倍が長さとなる。
ルビが行に収まるならルビ行、そうでないならルビなし行。


$#########$#########$#########$#########$#########
220218

Page3Js クラスを作って、そこからに行を突っ込んで
余った行を次の Page3Js クラスにって方法だと、
非同期処理の問題で余りの行が生成される前に
次の Page3Js クラスが生成され、エラーになる。

Page クラスのメソッドを排除し、ただの構造体にし、
main に createPage() を移植して Promise 化、
async / await で制御することで解決。

220216 の、行はみ出しの3つのパターンのうち、2と3は解決した。

separateFinalLine() と getIndexOfLineBreak() に
残りの行数を引数として追加した結果、1の問題も解決した……
……かのように思えたが、禁則処理によって増えた文字数でバグが発生していた。

原因判明。
ルビを含まない line は単純に最大文字数で改行していたが、それが仇となった。
禁則処理に対応した関数が必要。
最後の文字と、その次の文字を検出して処理を加える。